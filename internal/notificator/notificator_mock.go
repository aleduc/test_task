// Code generated by MockGen. DO NOT EDIT.
// Source: notificator.go

// Package notificator is a generated GoMock package.
package notificator

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotificator is a mock of Notificator interface.
type MockNotificator struct {
	ctrl     *gomock.Controller
	recorder *MockNotificatorMockRecorder
}

// MockNotificatorMockRecorder is the mock recorder for MockNotificator.
type MockNotificatorMockRecorder struct {
	mock *MockNotificator
}

// NewMockNotificator creates a new mock instance.
func NewMockNotificator(ctrl *gomock.Controller) *MockNotificator {
	mock := &MockNotificator{ctrl: ctrl}
	mock.recorder = &MockNotificatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificator) EXPECT() *MockNotificatorMockRecorder {
	return m.recorder
}

// Push mocks base method.
func (m *MockNotificator) Push(ctx context.Context, data Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockNotificatorMockRecorder) Push(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockNotificator)(nil).Push), ctx, data)
}

// MockRepositoryNotificator is a mock of RepositoryNotificator interface.
type MockRepositoryNotificator struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryNotificatorMockRecorder
}

// MockRepositoryNotificatorMockRecorder is the mock recorder for MockRepositoryNotificator.
type MockRepositoryNotificatorMockRecorder struct {
	mock *MockRepositoryNotificator
}

// NewMockRepositoryNotificator creates a new mock instance.
func NewMockRepositoryNotificator(ctrl *gomock.Controller) *MockRepositoryNotificator {
	mock := &MockRepositoryNotificator{ctrl: ctrl}
	mock.recorder = &MockRepositoryNotificatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryNotificator) EXPECT() *MockRepositoryNotificatorMockRecorder {
	return m.recorder
}

// Push mocks base method.
func (m *MockRepositoryNotificator) Push(ctx context.Context, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockRepositoryNotificatorMockRecorder) Push(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockRepositoryNotificator)(nil).Push), ctx, data)
}
